name: Release

permissions:
  contents: write

on:
  workflow_dispatch:

jobs:
  trigger-build:
    runs-on: ubuntu-latest
    outputs:
      run-id: ${{ steps.trigger.outputs.run-id }}
    steps:
      - name: Trigger Build Workflow
        id: trigger
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Build Apps  # must match build.yml name
          ref: refs/heads/master
          token: ${{ secrets.GITHUB_TOKEN }}

  wait-for-build:
    needs: trigger-build
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Build Workflow to Finish
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = parseInt('${{ needs.trigger-build.outputs.run-id }}');
            let status = 'in_progress';
            while (status === 'in_progress' || status === 'queued') {
              const { data: run } = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId
              });
              status = run.status;
              const conclusion = run.conclusion;
              if (status === 'completed') {
                if (conclusion !== 'success') {
                  throw new Error(`Build workflow failed with conclusion: ${conclusion}`);
                }
                break;
              }
              console.log(`Waiting for build workflow... status=${status}`);
              await new Promise(resolve => setTimeout(resolve, 15000)); // 15s
            }

  create-release:
    needs: wait-for-build
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts from Last Build
        run: |
          gh run download $(gh run list --workflow="Build Apps" --branch=master --limit=1 --json id --jq '.[0].id') --dir artifacts

      - name: Clean Unpacked Directories
        run: |
          find artifacts/ -type d -name '*-unpacked' -exec rm -rf {} +
          find artifacts/ -type d -name 'build' -exec rm -rf {} +

      - name: Generate SHA256 Hashes
        run: |
          cd artifacts
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> SHA256SUMS.txt
            fi
          done

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            artifacts/*/*.tar.gz
            artifacts/*/*.deb
            artifacts/*/*.rpm
            artifacts/*/*.exe
            artifacts/*/*.AppImage
            artifacts/*/*.zip
            artifacts/*/*.msi
            artifacts/*/*.dmg

            artifacts/*.tar.gz
            artifacts/*.deb
            artifacts/*.rpm
            artifacts/*.exe
            artifacts/*.AppImage
            artifacts/*.zip
            artifacts/*.msi
            artifacts/*.dmg
            artifacts/googleballs-desktop
            artifacts/SHA256SUMS.txt
          body: |
            ## Release v${{ github.run_number }}
            
            ### Checksums
            ```
            $(cat artifacts/SHA256SUMS.txt)
            ```
