name: Create Release (Manual Build)

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_name:
        description: 'Release name'
        required: true
        default: 'Google Balls Desktop'
      build_run_id:
        description: 'Build workflow run ID (get from Actions tab)'
        required: true
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download All Artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const runId = '${{ github.event.inputs.build_run_id }}';
            
            // Verify the run exists and completed successfully
            const run = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });
            
            if (run.data.conclusion !== 'success') {
              throw new Error(`Build workflow run ${runId} did not complete successfully. Status: ${run.data.conclusion}`);
            }
            
            console.log(`Using build run: ${run.data.html_url}`);
            
            // Get all artifacts from the build run
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });
            
            console.log(`Found ${artifacts.data.artifacts.length} artifacts`);
            
            // Download each artifact
            for (const artifact of artifacts.data.artifacts) {
              console.log(`Downloading artifact: ${artifact.name}`);
              
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              
              const fs = require('fs');
              fs.writeFileSync(`${artifact.name}.zip`, Buffer.from(download.data));
            }

      - name: Extract and Organize Artifacts
        run: |
          mkdir -p release-assets
          
          # Extract all artifact zips and organize them
          for zip_file in *.zip; do
            if [ -f "$zip_file" ]; then
              echo "Processing $zip_file..."
              artifact_name=$(basename "$zip_file" .zip)
              mkdir -p "temp_$artifact_name"
              unzip -q "$zip_file" -d "temp_$artifact_name"
              
              # Copy ALL files from each artifact, preserving original names
              find "temp_$artifact_name" -type f \( \
                -name "*.exe" -o \
                -name "*.msi" -o \
                -name "*.deb" -o \
                -name "*.rpm" -o \
                -name "*.dmg" -o \
                -name "*.AppImage" -o \
                -name "*.ipa" -o \
                -name "*.tar.gz" -o \
                -name "googleballs-desktop*" \
              \) -exec cp {} release-assets/ \;
              
              # Also handle GTK archives specially
              if [[ "$artifact_name" == "native-gtk-"* ]]; then
                cd "temp_$artifact_name"
                if ls *.tar.gz 1> /dev/null 2>&1; then
                  cp *.tar.gz ../release-assets/
                else
                  # Create archive if not already present
                  platform=$(echo "$artifact_name" | cut -d'-' -f3)
                  tar -czf "../release-assets/googleballs-desktop-$platform-gtk.tar.gz" .
                fi
                cd ..
              fi
              
              rm -rf "temp_$artifact_name"
            fi
          done
          
          # List all release assets with sizes
          echo "Release assets prepared:"
          ls -lah release-assets/

      - name: Generate Release Notes with Download Table
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          
          # Create release notes with download table
          cat > release_notes.md << EOF
          # Google Balls
          
          multiple platform builds available for download:
          
          ## ðŸ“¥ downloads
          
          | Platform | Type | File | Size | Download |
          |----------|------|------|------|----------|
          EOF
          
          # Function to determine file type based on filename and extension
          get_file_type() {
            local filename="$1"
            case "$filename" in
              *"native"* | *"googleballs-desktop"*)
                if [[ "$filename" == *".tar.gz" ]] || [[ "$filename" == *"gtk"* ]]; then
                  echo "GTK3"
                else
                  echo "Native"
                fi
                ;;
              *".msi" | *".deb" | *".AppImage")
                echo "Tauri"
                ;;
              *"Setup"* | *"setup"* | *".rpm" | *".dmg" | *"elevate.exe")
                echo "Electron"
                ;;
              *".ipa")
                echo "Native"
                ;;
              *)
                # Default fallback - try to guess from extension and name patterns
                if [[ "$filename" == *".msi" ]]; then
                  echo "Tauri"
                elif [[ "$filename" == *".deb" ]]; then
                  echo "Tauri"
                elif [[ "$filename" == *".AppImage" ]]; then
                  echo "Tauri"
                elif [[ "$filename" == *"tauri"* ]]; then
                  echo "Tauri"
                elif [[ "$filename" == *".exe" ]]; then
                  echo "Electron"
                elif [[ "$filename" == *".rpm" ]]; then
                  echo "Electron"
                elif [[ "$filename" == *".dmg" ]]; then
                  echo "Electron"
                else
                  echo "Unknown"
                fi
                ;;
            esac
          }
          
          # Function to determine platform
          get_platform() {
            local filename="$1"
            case "$filename" in
              *"windows"* | *"win"* | *".exe" | *".msi" | *"x64"* | *"ia32"*)
                echo "Windows"
                ;;
              *"linux"* | *"ubuntu"* | *".deb" | *".rpm" | *".AppImage" | *"amd64"* | *"x86_64"*)
                echo "Linux"
                ;;
              *"macos"* | *"mac"* | *"darwin"* | *"universal"* | *".dmg")
                echo "macOS"
                ;;
              *".ipa" | *"ios"*)
                echo "iOS"
                ;;
              *)
                echo "Unknown"
                ;;
            esac
          }
          
          # Add all files from release-assets
          for file in release-assets/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              filesize=$(ls -lah "$file" | awk '{print $5}')
              platform=$(get_platform "$filename")
              filetype=$(get_file_type "$filename")
              download_url="https://github.com/weeniemount/googleballs-app/releases/download/$TAG_NAME/$filename"
              
              # Determine description based on type and platform
              case "$filetype" in
                "Native")
                  if [[ "$filename" == *".ipa" ]]; then
                    description="iOS application"
                  elif [[ "$filename" == *"gtk"* ]]; then
                    description="$platform GTK3 application with bundled libraries"
                  else
                    description="Native $platform executable with SDL2"
                  fi
                  ;;
                "GTK3")
                  description="$platform GTK3 application with bundled libraries"
                  ;;
                "Tauri")
                  if [[ "$filename" == *".msi" ]]; then
                    description="Modern desktop app with web technologies (MSI installer)"
                  elif [[ "$filename" == *".deb" ]]; then
                    description="Modern desktop app with web technologies (DEB package)"
                  elif [[ "$filename" == *".AppImage" ]]; then
                    description="Modern desktop app with web technologies (AppImage)"
                  else
                    description="Modern desktop app with web technologies"
                  fi
                  ;;
                "Electron")
                  if [[ "$filename" == *".rpm" ]]; then
                    description="Cross-platform desktop app with Electron (RPM package)"
                  elif [[ "$filename" == *".dmg" ]]; then
                    description="Cross-platform desktop app with Electron"
                  else
                    description="Cross-platform desktop app with Electron"
                  fi
                  ;;
                *)
                  description="Application binary"
                  ;;
              esac
              
              echo "| $platform | $filetype | \`$filename\` | $filesize | [Download]($download_url) |" >> release_notes.md
            fi
          done
          
          # Add installation instructions
          cat >> release_notes.md << 'EOF'
          
          wow! google balls!

          for iOS, you can sideload it onto your device by using something like AltStore, Sidestore, Sideloadly or LiveContainer. you can also have a jailbroken device. works on iOS 14.0+
          
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name }}
          name: ${{ github.event.inputs.release_name }}
          body_path: release_notes.md
          files: release-assets/*
          prerelease: ${{ github.event.inputs.prerelease }}
          make_latest: ${{ github.event.inputs.prerelease != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}