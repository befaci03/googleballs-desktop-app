name: Create Release

permissions:
  contents: write
  actions: read

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Build Apps workflow run ID (leave empty for latest successful run)'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Build Apps workflow run ID
        id: get-run
        run: |
          if [ -n "${{ github.event.inputs.run_id }}" ]; then
            run_id="${{ github.event.inputs.run_id }}"
            echo "Using provided run ID: $run_id"
          else
            # Get the latest successful run of the "Build Apps" workflow
            run_id=$(gh api repos/${{ github.repository }}/actions/workflows/build.yml/runs \
              --jq '.workflow_runs | map(select(.conclusion == "success")) | first | .id')
            
            if [ -z "$run_id" ] || [ "$run_id" = "null" ]; then
              echo "No successful Build Apps workflow run found"
              exit 1
            fi
            
            echo "Found latest successful Build Apps run ID: $run_id"
          fi
          
          echo "run_id=$run_id" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download and organize artifacts from Build Apps workflow
        run: |
          mkdir -p artifacts
          
          echo "Downloading artifacts from run ID: ${{ steps.get-run.outputs.run_id }}"
          
          # Get list of artifacts with names and download URLs
          gh api repos/${{ github.repository }}/actions/runs/${{ steps.get-run.outputs.run_id }}/artifacts \
            --jq '.artifacts[] | select(.expired == false) | [.name, .archive_download_url] | @tsv' | \
          while IFS=$'\t' read -r artifact_name download_url; do
            echo "Downloading artifact: $artifact_name"
            
            # Create folder for this artifact
            mkdir -p "artifacts/$artifact_name"
            
            # Download and extract directly into the artifact folder
            gh api "$download_url" | unzip -q - -d "artifacts/$artifact_name/"
            
            echo "Extracted $artifact_name into artifacts/$artifact_name/"
          done
          
          echo "Artifact extraction complete. Directory structure:"
          find artifacts -type f | head -20
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Organize release files by platform suffix
        run: |
          mkdir -p release
          
          # Initialize release table
          cat > release_table.md << 'EOF'
          ## 📦 Downloads
          
          | Platform/Type | Download | Size |
          |---------------|----------|------|
          EOF
          
          # Function to add file to release with proper naming
          add_to_release() {
            local file="$1"
            local artifact_name="$2"
            
            if [ ! -f "$file" ]; then
              return
            fi
            
            filename=$(basename "$file")
            extension="${filename##*.}"
            base_name="${filename%.*}"
            
            # Extract platform suffix (everything after last underscore in artifact name)
            if [[ "$artifact_name" =~ _([^_]+)$ ]]; then
              platform_suffix="${BASH_REMATCH[1]}"
            else
              platform_suffix="$artifact_name"
            fi
            
            # Create a clean release filename based on artifact name and platform
            case "$artifact_name" in
              *"native-windows"*"native")
                release_name="googleballs-desktop-native-windows-x64.${extension}"
                platform_name="🪟 Windows (Native)"
                ;;
              *"native-ubuntu"*"native")
                release_name="googleballs-desktop-native-linux-x64.${extension}"
                platform_name="🐧 Linux (Native)"
                ;;
              *"native-gtk-windows"*"native")
                release_name="googleballs-desktop-gtk-windows-x64.${extension}"
                platform_name="🪟 Windows (GTK3)"
                ;;
              *"native-gtk-ubuntu"*"native")
                release_name="googleballs-desktop-gtk-linux-x64.${extension}"
                platform_name="🐧 Linux (GTK3)"
                ;;
              *"tauri-windows"*"tauri")
                release_name="googleballs-desktop-tauri-windows-x64.${extension}"
                platform_name="🪟 Windows (Tauri)"
                ;;
              *"tauri-ubuntu"*"tauri")
                release_name="googleballs-desktop-tauri-linux-x64.${extension}"
                platform_name="🐧 Linux (Tauri)"
                ;;
              *"electron-windows"*"electron")
                release_name="googleballs-desktop-electron-windows-x64.${extension}"
                platform_name="🪟 Windows (Electron)"
                ;;
              *"electron-ubuntu"*"electron")
                release_name="googleballs-desktop-electron-linux-x64.${extension}"
                platform_name="🐧 Linux (Electron)"
                ;;
              *"electron-macos"*"electron")
                release_name="googleballs-desktop-electron-macos-universal.${extension}"
                platform_name="🍎 macOS (Electron)"
                ;;
              *"ios"*)
                release_name="googleballs-desktop-ios.${extension}"
                platform_name="📱 iOS"
                ;;
              *)
                # Fallback: use original filename with artifact name prefix
                release_name="${artifact_name}-${filename}"
                platform_name="❓ ${artifact_name}"
                ;;
            esac
            
            # Avoid duplicate names
            counter=1
            original_release_name="$release_name"
            while [ -f "release/$release_name" ]; do
              name_without_ext="${original_release_name%.*}"
              ext="${original_release_name##*.}"
              release_name="${name_without_ext}-${counter}.${ext}"
              counter=$((counter + 1))
            done
            
            # Copy file to release directory
            cp "$file" "release/$release_name"
            
            # Get file size
            size=$(du -h "$file" | cut -f1)
            
            # Add to release table
            echo "| $platform_name | [$release_name](../../releases/download/${{ github.ref_name }}/$release_name) | $size |" >> release_table.md
            
            echo "Added to release: $file -> $release_name ($size)"
          }
          
          # Process each artifact folder
          for artifact_dir in artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              artifact_name=$(basename "$artifact_dir")
              echo "Processing artifact: $artifact_name"
              
              # Find all distributable files in this artifact
              find "$artifact_dir" -type f \( -name "*.exe" -o -name "*.msi" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.ipa" -o -name "*.zip" -o -name "*.tar.gz" \) | while read file; do
                add_to_release "$file" "$artifact_name"
              done
            fi
          done
          
          # Add footer to release table
          cat >> release_table.md << 'EOF'
          
          ### 📋 Installation Notes
          
          - **Native builds**: Lightweight, minimal dependencies
          - **GTK3 builds**: Include bundled GTK3 libraries for better compatibility  
          - **Tauri builds**: Modern web-based UI with native performance
          - **Electron builds**: Cross-platform with web technologies
          - **iOS build**: Unsigned IPA - requires sideloading
          
          ### 🚀 Quick Start
          
          1. Choose the build type that fits your needs
          2. Download the appropriate file for your platform
          3. Follow platform-specific installation instructions
          
          Choose the build that best fits your system and preferences!
          EOF

      - name: Create Release Notes
        run: |
          # Get tag name, defaulting to timestamp if not a tag push
          if [ "${{ github.ref_type }}" = "tag" ]; then
            version_name="${{ github.ref_name }}"
          else
            version_name="Build-$(date +%Y%m%d-%H%M%S)"
          fi
          
          cat > release_notes.md << EOF
          yooo its google balls
          
          $(cat release_table.md)

          EOF

      - name: List files being released
        run: |
          echo "Files being released:"
          ls -la release/
          echo ""
          echo "Artifact structure was:"
          find artifacts -type d | sort

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          body_path: release_notes.md
          draft: false
          prerelease: ${{ github.ref_type != 'tag' }}
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || format('build-{0}', github.run_number) }}
          name: ${{ github.ref_type == 'tag' && format('Google Balls Desktop {0}', github.ref_name) || format('Build {0}', github.run_number) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}