name: Create Release (Manual Build)

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_name:
        description: 'Release name'
        required: true
        default: 'Google Balls Desktop'
      build_run_id:
        description: 'Build workflow run ID (get from Actions tab)'
        required: true
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download All Artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const runId = '${{ github.event.inputs.build_run_id }}';
            
            // Verify the run exists and completed successfully
            const run = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });
            
            if (run.data.conclusion !== 'success') {
              throw new Error(`Build workflow run ${runId} did not complete successfully. Status: ${run.data.conclusion}`);
            }
            
            console.log(`Using build run: ${run.data.html_url}`);
            
            // Get all artifacts from the build run
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });
            
            console.log(`Found ${artifacts.data.artifacts.length} artifacts`);
            
            // Download each artifact
            for (const artifact of artifacts.data.artifacts) {
              console.log(`Downloading artifact: ${artifact.name}`);
              
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              
              const fs = require('fs');
              fs.writeFileSync(`${artifact.name}.zip`, Buffer.from(download.data));
            }

      - name: Extract and Organize Artifacts
        run: |
          mkdir -p release-assets
          
          # Extract all artifact zips and organize them
          for zip_file in *.zip; do
            if [ -f "$zip_file" ]; then
              echo "Processing $zip_file..."
              artifact_name=$(basename "$zip_file" .zip)
              mkdir -p "temp_$artifact_name"
              unzip -q "$zip_file" -d "temp_$artifact_name"
              
              # Move files to release-assets with proper naming
              case "$artifact_name" in
                "native-windows-latest")
                  find "temp_$artifact_name" -name "*.exe" -exec cp {} release-assets/googleballs-desktop-windows-native.exe \;
                  ;;
                "native-ubuntu-latest")
                  find "temp_$artifact_name" -name "googleballs-desktop*" ! -name "*.exe" -exec cp {} release-assets/googleballs-desktop-linux-native \;
                  ;;
                "native-gtk-windows-latest")
                  cd "temp_$artifact_name" && tar -czf "../release-assets/googleballs-desktop-windows-gtk.tar.gz" . && cd ..
                  ;;
                "native-gtk-ubuntu-latest")
                  find "temp_$artifact_name" -name "*.tar.gz" -exec cp {} release-assets/googleballs-desktop-linux-gtk.tar.gz \;
                  ;;
                "tauri-windows-latest")
                  find "temp_$artifact_name" -name "*.msi" -exec cp {} release-assets/ \;
                  find "temp_$artifact_name" -name "*.exe" -exec cp {} release-assets/ \;
                  ;;
                "tauri-ubuntu-latest")
                  find "temp_$artifact_name" -name "*.deb" -exec cp {} release-assets/ \;
                  find "temp_$artifact_name" -name "*.AppImage" -exec cp {} release-assets/ \;
                  ;;
                "googleballs-desktop-windows-latest")
                  find "temp_$artifact_name" -name "*.exe" -exec cp {} release-assets/ \;
                  ;;
                "googleballs-desktop-ubuntu-latest")
                  find "temp_$artifact_name" -name "*.rpm" -exec cp {} release-assets/ \;
                  ;;
                "googleballs-desktop-macos-latest")
                  find "temp_$artifact_name" -name "*.dmg" -exec cp {} release-assets/ \;
                  ;;
                "ios-app")
                  find "temp_$artifact_name" -name "*.ipa" -exec cp {} release-assets/ \;
                  ;;
              esac
              
              rm -rf "temp_$artifact_name"
            fi
          done
          
          # List all release assets
          echo "Release assets prepared:"
          ls -la release-assets/

      - name: Generate Release Notes with Download Table
        run: |
          # Create release notes with download table
          cat > release_notes.md << 'EOF'
          # Google Balls
          
          multiple platform builds available for download:
          
          ## ðŸ“¥ downloads
          
          | Platform | Type | File | Description |
          |----------|------|------|-------------|
          EOF
          
          # Add download table entries based on available files
          if [ -f "release-assets/googleballs-desktop-windows-native.exe" ]; then
            echo "| Windows | Native | \`googleballs-desktop-windows-native.exe\` | Native Windows executable with SDL2 |" >> release_notes.md
          fi
          
          if [ -f "release-assets/googleballs-desktop-linux-native" ]; then
            echo "| Linux | Native | \`googleballs-desktop-linux-native\` | Native Linux executable with SDL2 |" >> release_notes.md
          fi
          
          if [ -f "release-assets/googleballs-desktop-windows-gtk.tar.gz" ]; then
            echo "| Windows | GTK3 | \`googleballs-desktop-windows-gtk.tar.gz\` | Windows GTK3 application with bundled libraries |" >> release_notes.md
          fi
          
          if [ -f "release-assets/googleballs-desktop-linux-gtk.tar.gz" ]; then
            echo "| Linux | GTK3 | \`googleballs-desktop-linux-gtk.tar.gz\` | Linux GTK3 application with bundled libraries |" >> release_notes.md
          fi
          
          # Add Tauri files
          for file in release-assets/*.msi; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "| Windows | Tauri | \`$filename\` | Modern desktop app with web technologies (MSI installer) |" >> release_notes.md
            fi
          done
          
          for file in release-assets/*tauri*.exe; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "| Windows | Tauri | \`$filename\` | Modern desktop app with web technologies (Portable) |" >> release_notes.md
            fi
          done
          
          for file in release-assets/*.deb; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "| Linux | Tauri | \`$filename\` | Modern desktop app with web technologies (DEB package) |" >> release_notes.md
            fi
          done
          
          for file in release-assets/*.AppImage; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "| Linux | Tauri | \`$filename\` | Modern desktop app with web technologies (AppImage) |" >> release_notes.md
            fi
          done
          
          # Add Electron files
          for file in release-assets/*.exe; do
            if [ -f "$file" ] && [[ "$file" != *"tauri"* ]] && [[ "$file" != *"native"* ]]; then
              filename=$(basename "$file")
              echo "| Windows | Electron | \`$filename\` | Cross-platform desktop app with Electron |" >> release_notes.md
            fi
          done
          
          for file in release-assets/*.rpm; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "| Linux | Electron | \`$filename\` | Cross-platform desktop app with Electron (RPM package) |" >> release_notes.md
            fi
          done
          
          for file in release-assets/*.dmg; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "| macOS | Electron | \`$filename\` | Cross-platform desktop app with Electron |" >> release_notes.md
            fi
          done
          
          # Add iOS
          for file in release-assets/*.ipa; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "| iOS | Native | \`$filename\` | iOS application |" >> release_notes.md
            fi
          done
          
          # Add installation instructions
          cat >> release_notes.md << 'EOF'
          
          wow! google balls!

          for iOS, you can sideload it onto your device by using something like AltStore, Sidestore, Sideloadly or LiveContainer. you can also have a jailbroken device. works on iOS 14.0+
          
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name }}
          name: ${{ github.event.inputs.release_name }}
          body_path: release_notes.md
          files: release-assets/*
          prerelease: ${{ github.event.inputs.prerelease }}
          make_latest: ${{ github.event.inputs.prerelease != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}