name: Release

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Download Latest Successful Build Artifacts
        run: |
          # Get the latest successful build run
          latest_run=$(gh run list --workflow="Build Apps" --branch=master --status=success --limit=1 --json id --jq '.[0].id')
          
          if [ -z "$latest_run" ] || [ "$latest_run" = "null" ]; then
            echo "No successful build found. Please run the Build Apps workflow first."
            exit 1
          fi
          
          echo "Using build run ID: $latest_run"
          gh run download $latest_run --dir artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean Unpacked Directories
        run: |
          find artifacts/ -type d -name '*-unpacked' -exec rm -rf {} + 2>/dev/null || true
          find artifacts/ -type d -name 'build' -exec rm -rf {} + 2>/dev/null || true

      - name: Organize and Generate File Information
        run: |
          cd artifacts
          
          # Create organized structure
          mkdir -p organized/{windows,linux,macos,ios,android}
          
          # Function to get file size in human readable format
          get_size() {
            local file="$1"
            if [ -f "$file" ]; then
              du -h "$file" | cut -f1
            else
              echo "N/A"
            fi
          }
          
          # Function to detect file type and move to appropriate directory
          organize_files() {
            find . -type f \( \
              -name "*.exe" -o \
              -name "*.msi" -o \
              -name "*.zip" -o \
              -name "*.tar.gz" -o \
              -name "*.deb" -o \
              -name "*.rpm" -o \
              -name "*.AppImage" -o \
              -name "*.dmg" -o \
              -name "*.ipa" -o \
              -name "googleballs-desktop*" \
            \) | while read file; do
              filename=$(basename "$file")
              size=$(get_size "$file")
              
              # Determine platform and type based on filename and extension
              if [[ "$filename" =~ windows|win|\.exe$|\.msi$ ]]; then
                platform="windows"
                if [[ "$filename" =~ electron ]]; then
                  type="Electron"
                elif [[ "$filename" =~ tauri ]]; then
                  type="Tauri"
                elif [[ "$filename" =~ gtk ]]; then
                  type="GTK"
                else
                  type="Native"
                fi
              elif [[ "$filename" =~ linux|ubuntu|\.deb$|\.rpm$|\.AppImage$ ]]; then
                platform="linux"
                if [[ "$filename" =~ electron ]]; then
                  type="Electron"
                elif [[ "$filename" =~ tauri ]]; then
                  type="Tauri"
                elif [[ "$filename" =~ gtk ]]; then
                  type="GTK"
                else
                  type="Native"
                fi
              elif [[ "$filename" =~ macos|mac|darwin|\.dmg$ ]]; then
                platform="macos"
                if [[ "$filename" =~ electron ]]; then
                  type="Electron"
                elif [[ "$filename" =~ tauri ]]; then
                  type="Tauri"
                else
                  type="Native"
                fi
              elif [[ "$filename" =~ \.ipa$ ]]; then
                platform="ios"
                type="iOS App"
              else
                platform="linux" # default fallback
                type="Unknown"
              fi
              
              # Copy file to organized directory
              cp "$file" "organized/$platform/"
              
              # Record file info
              echo "$platform|$type|$filename|$size" >> file_info.txt
            done
          }
          
          organize_files
          
          # Generate SHA256 hashes for all files
          find organized/ -type f -exec sha256sum {} \; | sed 's|organized/||' > SHA256SUMS.txt

      - name: Generate Download Table
        run: |
          cd artifacts
          
          cat > download_table.md << 'EOF'
          ## üì• Downloads
          
          Choose the appropriate version for your platform:
          
          ### Windows
          | Type | File | Size | Download |
          |------|------|------|----------|
          EOF
          
          # Add Windows files
          if grep -q "^windows" file_info.txt 2>/dev/null; then
            grep "^windows" file_info.txt | while IFS='|' read platform type filename size; do
              echo "| $type | \`$filename\` | $size | [Download]($filename) |" >> download_table.md
            done
          else
            echo "| N/A | No Windows builds available | N/A | N/A |" >> download_table.md
          fi
          
          cat >> download_table.md << 'EOF'
          
          ### Linux
          | Type | File | Size | Download |
          |------|------|------|----------|
          EOF
          
          # Add Linux files
          if grep -q "^linux" file_info.txt 2>/dev/null; then
            grep "^linux" file_info.txt | while IFS='|' read platform type filename size; do
              echo "| $type | \`$filename\` | $size | [Download]($filename) |" >> download_table.md
            done
          else
            echo "| N/A | No Linux builds available | N/A | N/A |" >> download_table.md
          fi
          
          cat >> download_table.md << 'EOF'
          
          ### macOS
          | Type | File | Size | Download |
          |------|------|------|----------|
          EOF
          
          # Add macOS files
          if grep -q "^macos" file_info.txt 2>/dev/null; then
            grep "^macos" file_info.txt | while IFS='|' read platform type filename size; do
              echo "| $type | \`$filename\` | $size | [Download]($filename) |" >> download_table.md
            done
          else
            echo "| N/A | No macOS builds available | N/A | N/A |" >> download_table.md
          fi
          
          cat >> download_table.md << 'EOF'
          
          ### Mobile
          | Platform | Type | File | Size | Download |
          |----------|------|------|------|----------|
          EOF
          
          # Add iOS files
          if grep -q "^ios" file_info.txt 2>/dev/null; then
            grep "^ios" file_info.txt | while IFS='|' read platform type filename size; do
              echo "| iOS | $type | \`$filename\` | $size | [Download]($filename) |" >> download_table.md
            done
          else
            echo "| iOS | N/A | No iOS builds available | N/A | N/A |" >> download_table.md
          fi
          
          cat >> download_table.md << 'EOF'
          
          ---
          
          ### üöÄ Quick Start Guide
          
          #### Windows Users
          - **Recommended**: Download the **Electron** version for the full experience
          - **Lightweight**: Choose **Tauri** for a smaller download
          - **Minimal**: Pick **Native** for fastest performance
          
          #### Linux Users
          - **Easy Install**: Use the **.deb** or **.rpm** packages
          - **Universal**: Try the **AppImage** (runs anywhere)
          - **Portable**: Download the **.tar.gz** archive
          
          #### macOS Users
          - Download the **.dmg** file and drag to Applications folder
          
          ### üìã Installation Instructions
          
          <details>
          <summary><strong>Windows Installation</strong></summary>
          
          - **Electron (.exe)**: Double-click to install normally
          - **Tauri (.msi)**: Right-click ‚Üí "Install" or double-click
          - **Native/GTK (.tar.gz)**: Extract and run the executable
          </details>
          
          <details>
          <summary><strong>Linux Installation</strong></summary>
          
          - **Ubuntu/Debian (.deb)**:
            ```bash
            sudo dpkg -i googleballs-desktop-*.deb
            sudo apt-get install -f  # Fix any dependencies
            ```
          
          - **RHEL/Fedora (.rpm)**:
            ```bash
            sudo rpm -i googleballs-desktop-*.rpm
            # or
            sudo dnf install googleballs-desktop-*.rpm
            ```
          
          - **AppImage**:
            ```bash
            chmod +x *.AppImage
            ./googleballs-desktop-*.AppImage
            ```
          
          - **Tarball (.tar.gz)**:
            ```bash
            tar -xzf gtk-app-linux-*.tar.gz
            cd build/
            ./launch.sh  # For GTK version
            ```
          </details>
          
          <details>
          <summary><strong>macOS Installation</strong></summary>
          
          1. Download the `.dmg` file
          2. Double-click to mount the disk image
          3. Drag the app to your Applications folder
          4. You may need to right-click ‚Üí "Open" the first time (due to Gatekeeper)
          </details>
          
          ### ‚ùì Build Types Explained
          
          - **üñ•Ô∏è Native**: Pure C/C++ application, smallest size, fastest startup
          - **üé® GTK**: Cross-platform GUI with bundled GTK libraries
          - **‚ö° Tauri**: Rust + Web UI, modern and efficient
          - **üåê Electron**: Full web technologies, largest but most features
          - **üì± iOS**: For iPhone/iPad (requires developer certificate)
          
          EOF

      - name: