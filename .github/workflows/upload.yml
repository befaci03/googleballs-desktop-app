name: Create Release

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Get latest Build Apps workflow run
        id: get-run
        run: |
          # Get the latest successful run of the "Build Apps" workflow
          run_id=$(gh api repos/${{ github.repository }}/actions/workflows/build.yml/runs \
            --jq '.workflow_runs | map(select(.conclusion == "success")) | first | .id')
          
          if [ -z "$run_id" ] || [ "$run_id" = "null" ]; then
            echo "No successful Build Apps workflow run found"
            exit 1
          fi
          
          echo "Found Build Apps run ID: $run_id"
          echo "run_id=$run_id" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifacts from Build Apps workflow
        run: |
          mkdir -p artifacts
          
          # Download all artifacts from the latest Build Apps run
          gh api repos/${{ github.repository }}/actions/runs/${{ steps.get-run.outputs.run_id }}/artifacts \
            --jq '.artifacts[] | select(.expired == false) | .archive_download_url' | \
          while read url; do
            artifact_name=$(gh api "$url" --jq '.name // empty' 2>/dev/null || echo "unknown")
            echo "Downloading artifact: $artifact_name"
            gh api "$url" > "artifacts/${artifact_name}.zip"
          done
          
          # Extract all downloaded artifacts
          cd artifacts
          for zip in *.zip; do
            if [ -f "$zip" ]; then
              echo "Extracting $zip"
              unzip -q "$zip" -d "${zip%.zip}/"
              rm "$zip"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Organize release files by platform suffix
        run: |
          mkdir -p release
          
          # Initialize release table
          cat > release_table.md << 'EOF'
          ## 📦 Downloads
          
          | Platform/Type | Download | Size |
          |---------------|----------|------|
          EOF
          
          # Function to add file to release with proper naming
          add_to_release() {
            local file="$1"
            local platform_suffix="$2"
            
            if [ ! -f "$file" ]; then
              return
            fi
            
            filename=$(basename "$file")
            extension="${filename##*.}"
            base_name="${filename%.*}"
            
            # Create a clean release filename
            case "$platform_suffix" in
              *"windows"*"native")
                release_name="googleballs-desktop-native-windows-x64.${extension}"
                platform_name="🪟 Windows (Native)"
                ;;
              *"ubuntu"*"native")
                release_name="googleballs-desktop-native-linux-x64.${extension}"
                platform_name="🐧 Linux (Native)"
                ;;
              *"windows"*"gtk")
                release_name="googleballs-desktop-gtk-windows-x64.${extension}"
                platform_name="🪟 Windows (GTK3)"
                ;;
              *"ubuntu"*"gtk")
                release_name="googleballs-desktop-gtk-linux-x64.${extension}"
                platform_name="🐧 Linux (GTK3)"
                ;;
              *"windows"*"tauri")
                release_name="googleballs-desktop-tauri-windows-x64.${extension}"
                platform_name="🪟 Windows (Tauri)"
                ;;
              *"ubuntu"*"tauri")
                release_name="googleballs-desktop-tauri-linux-x64.${extension}"
                platform_name="🐧 Linux (Tauri)"
                ;;
              *"windows"*"electron")
                release_name="googleballs-desktop-electron-windows-x64.${extension}"
                platform_name="🪟 Windows (Electron)"
                ;;
              *"ubuntu"*"electron")
                release_name="googleballs-desktop-electron-linux-x64.${extension}"
                platform_name="🐧 Linux (Electron)"
                ;;
              *"macos"*"electron")
                release_name="googleballs-desktop-electron-macos-universal.${extension}"
                platform_name="🍎 macOS (Electron)"
                ;;
              *"ios")
                release_name="googleballs-desktop-ios.${extension}"
                platform_name="📱 iOS"
                ;;
              *)
                release_name="${base_name}-${platform_suffix}.${extension}"
                platform_name="❓ ${platform_suffix}"
                ;;
            esac
            
            # Copy file to release directory
            cp "$file" "release/$release_name"
            
            # Get file size
            size=$(du -h "$file" | cut -f1)
            
            # Add to release table
            echo "| $platform_name | [$release_name](../../releases/download/${{ github.ref_name }}/$release_name) | $size |" >> release_table.md
            
            echo "Added to release: $file -> $release_name ($size)"
          }
          
          # Find and process all files from artifacts
          find artifacts -type f \( -name "*.exe" -o -name "*.msi" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.ipa" -o -name "*.zip" -o -name "*.tar.gz" \) | while read file; do
            # Get the directory name which should contain platform info
            dir_name=$(dirname "$file" | xargs basename)
            
            # Extract platform suffix (everything after last underscore)
            if [[ "$dir_name" =~ _([^_]+)$ ]]; then
              platform_suffix="${BASH_REMATCH[1]}"
            else
              platform_suffix="$dir_name"
            fi
            
            add_to_release "$file" "$platform_suffix"
          done
          
          # Add footer to release table
          cat >> release_table.md << 'EOF'
          
          ### 📋 Installation Notes
          
          - **Native builds**: Lightweight, minimal dependencies
          - **GTK3 builds**: Include bundled GTK3 libraries for better compatibility  
          - **Tauri builds**: Modern web-based UI with native performance
          - **Electron builds**: Cross-platform with web technologies
          - **iOS build**: Unsigned IPA - requires sideloading
          
          ### 🚀 Quick Start
          
          1. Choose the build type that fits your needs
          2. Download the appropriate file for your platform
          3. Follow platform-specific installation instructions
          
          Choose the build that best fits your system and preferences!
          EOF

      - name: Create Release Notes
        run: |
          cat > release_notes.md << EOF
          google balls
          
          $(cat release_table.md)
          
          EOF

      - name: List files being released
        run: |
          echo "Files being released:"
          ls -la release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}