name: Build Apps

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build-native:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest, fedora-latest]
        include:
          - platform: fedora-latest
            container: 'fedora:latest'
        
    runs-on: ${{ matrix.platform == 'fedora-latest' && 'ubuntu-latest' || matrix.platform }}
    container: ${{ matrix.container }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install SDL2 (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsdl2-dev g++ build-essential
          # Build static SDL2 from source
          wget https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-2.28.5.tar.gz
          tar xzf SDL2-2.28.5.tar.gz
          cd SDL2-2.28.5
          ./configure --prefix=/usr/local --enable-static --disable-shared
          make -j$(nproc)
          sudo make install
          
      - name: Install SDL2 (Fedora)
        if: matrix.platform == 'fedora-latest'
        run: |
          dnf install -y gcc-c++ make wget tar
          # Build static SDL2 from source
          wget https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-2.28.5.tar.gz
          tar xzf SDL2-2.28.5.tar.gz
          cd SDL2-2.28.5
          ./configure --prefix=/usr/local --enable-static --disable-shared
          make -j$(nproc)
          make install
          
      - name: Install MinGW (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          choco install mingw --version=8.1.0 -y
          
      - name: Build Native App (Linux - Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cd native
          chmod +x compile.sh
          ./compile.sh
          
      - name: Build Native App (Linux - Fedora)
        if: matrix.platform == 'fedora-latest'
        run: |
          cd native
          chmod +x compile.sh
          ./compile.sh
          
      - name: Build Native App (Windows)
        if: matrix.platform == 'windows-latest'
        shell: cmd
        run: |
          cd native
          set PATH=C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin;%PATH%
          compile.bat
          
      - name: Upload Native Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.platform }}
          path: |
            native/googleballs-desktop*
            native/*.exe
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install Rust (Stable)
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
      
      - name: Install Dependencies (Tauri)
        run: |
          cd tauri
          npm install
          
      - name: Build Tauri App
        run: |
          cd tauri
          npm run tauri build
          
      - name: Upload Tauri Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.platform }}
          path: |
            tauri/src-tauri/target/release/bundle/
            
  build-electron:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]
        
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Setup GitHub token
        if: matrix.platform == 'windows-latest'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GH_TOKEN=$GITHUB_TOKEN" >> $GITHUB_ENV
          
      - name: Install Dependencies (Electron)
        run: |
          cd electron
          npm install
          
      - name: Build Electron App
        run: |
          cd electron
          npm run dist
          
      - name: Upload Electron Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-${{ matrix.platform }}
          path: electron/dist/
