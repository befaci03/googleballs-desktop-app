name: Build Apps

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build-native:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]
        
    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install SDL2 and X11 Dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential \
            libx11-dev \
            libxext-dev \
            libxcursor-dev \
            libxinerama-dev \
            libxi-dev \
            libxrandr-dev \
            libxss-dev \
            libxxf86vm-dev \
            libwayland-dev \
            libwayland-client0 \
            libwayland-cursor0 \
            libwayland-egl1 \
            libxkbcommon-dev \
            wayland-protocols
          wget https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-2.28.5.tar.gz
          tar xzf SDL2-2.28.5.tar.gz
          cd SDL2-2.28.5
          ./configure --prefix=/usr/local --enable-static --disable-shared
          make -j$(nproc)
          sudo make install
          
      - name: Setup MSYS2 and Dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-make
            mingw-w64-x86_64-SDL2
            make
          
      - name: Build Native App (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cd native
          chmod +x compile.sh
          ./compile.sh
          
      - name: Build Native App (Windows)
        if: matrix.platform == 'windows-latest'
        shell: msys2 {0}
        run: |
          cd native
          ./compile.bat
          
      - name: Upload Native Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.platform }}
          path: |
            native/googleballs-desktop*
            native/*.exe
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install Rust (Stable)
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
      
      - name: Install Dependencies (Tauri)
        run: |
          cd tauri
          npm install
          
      - name: Build Tauri App
        run: |
          cd tauri
          npm run tauri build
          
      - name: Upload Tauri Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.platform }}
          path: |
            tauri/src-tauri/target/release/bundle/
            
  build-electron:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]
        
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    
    container: ${{ matrix.platform == 'ubuntu-latest' && 'rockylinux:9' || '' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Linux Dependencies for Electron Build
        if: matrix.platform == 'ubuntu-latest'
        run: |
          # Install EPEL and development tools
          dnf install -y epel-release
          dnf groupinstall -y "Development Tools"
          dnf config-manager --set-enabled crb
          
          # Install Node.js 20
          dnf install -y nodejs npm gcc-c++ make python3
          
          # Install RPM build requirements and other dependencies
          dnf install -y rpm-build rpmdevtools ruby-devel gcc make wget gtk3-devel libnotify-devel nss-devel libXScrnSaver-devel libXtst-devel xdg-utils at-spi2-core libuuid-devel rubygems ruby-devel gcc zlib-devel curl
          
          # Install FPM
          gem install fpm -v 1.15.1
          
          # Create RPM build directory structure
          rpmdev-setuptree
          
          export USE_SYSTEM_FPM=true
          # Enable EPEL repository for additional packages
          yum install -y epel-release
          
          # Install development tools and RPM build requirements
          yum groupinstall -y "Development Tools"
          yum install -y rpm-build rpmdevtools ruby-devel gcc make wget gtk3-devel libnotify-devel nss-devel libXScrnSaver-devel libXtst-devel xdg-utils at-spi2-core libuuid-devel --skip-broken
          
          # Install newer version of Ruby and FPM
          wget https://cache.ruby-lang.org/pub/ruby/2.7/ruby-2.7.8.tar.gz
          tar xzf ruby-2.7.8.tar.gz
          cd ruby-2.7.8
          ./configure
          make -j$(nproc)
          make install
          
          # Update GEM paths
          export PATH="/usr/local/bin:$PATH"
          export GEM_HOME="/usr/local/gems"
          export PATH="$GEM_HOME/bin:$PATH"
          
          # Install FPM
          gem install fpm -v 1.15.1
          
          # Create RPM build directory structure
          rpmdev-setuptree
          
          export USE_SYSTEM_FPM=true
          
      - name: Setup GitHub token
        if: matrix.platform == 'windows-latest'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GH_TOKEN=$GITHUB_TOKEN" >> $GITHUB_ENV
          
      - name: Install Dependencies (Electron)
        run: |
          cd electron
          npm install
          
      - name: Build Electron App
        run: |
          cd electron
          npm run dist
          
      - name: Upload Electron Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-${{ matrix.platform }}
          path: electron/dist/
